<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shefin&#39;s Blog</title>
    <link>https://shefin-cse16.github.io/</link>
    <description>Recent content on Shefin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Oct 2020 21:51:20 +0600</lastBuildDate>
    
	<atom:link href="https://shefin-cse16.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Light OJ 1120: Rectangle Union Editorial with Multiset</title>
      <link>https://shefin-cse16.github.io/post/loj-1120-editorial/</link>
      <pubDate>Thu, 01 Oct 2020 21:51:20 +0600</pubDate>
      
      <guid>https://shefin-cse16.github.io/post/loj-1120-editorial/</guid>
      <description>Problem Link: Click Here
প্রবলেমঃ $n$ সংখ্যক “Axis Parallel” আয়তক্ষেত্রের বামদিকের নিচের কর্নার এবং ডানদিকের উপরের কর্নারের কো-অর্ডিনেট দেওয়া থাকবে । বের করতে হবে আয়তক্ষেত্রগুলো দ্বারা আবদ্ধ ক্ষেত্রের ক্ষেত্রফল কত ?
Example: উপরের চিত্রের হলুদ আয়তক্ষত্রের কো-অর্ডিনেটদ্বয় হচ্ছে $A(0, 2)$ এবং $X(3, 6)$ । সবুজ আয়তক্ষত্রের কো-অর্ডিনেটদ্বয়ঃ $C(2, 1)$ ও $Y(5, 4)$ এবং নীল আয়তক্ষত্রের কো-অর্ডিনেটদ্বয়ঃ $W(1, 3)$ ও $M(6, 7)$ । তাহলে এই তিনটি আয়তক্ষেত্রের মিলিত আবদ্ধ ক্ষেত্রের (ধূসর শেড করা অংশ) ক্ষেত্রফলঃ $31$ ।</description>
    </item>
    
    <item>
      <title>Modular Inverse Related Optimizations</title>
      <link>https://shefin-cse16.github.io/post/mod-inverse-optimization/</link>
      <pubDate>Thu, 01 Oct 2020 18:04:32 +0600</pubDate>
      
      <guid>https://shefin-cse16.github.io/post/mod-inverse-optimization/</guid>
      <description>[মডুলার অ্যারিথমেটিক এবং ইনভার্স সম্পর্কে জানতে এসব লিংকে ঘুরে আসা যেতে পারেঃ মডুলার অ্যারিথমেটিক , Modular Inverse]
কোনো কোনো প্রবলেমে অনেক নাম্বারের মডুলার ইনভার্স প্রিক্যালকুলেট করে রাখতে হয় । তখন TLE থেকে বাঁচতে এই টাইপের অপটিমাইজেশন প্রয়োজন হয় । যেমনঃ KUET IUPC, 2019 এর F নং প্রবলেমটা । সাথে একটা জিনিসও জানা থাকা দরকার । অতিরিক্ত $mod$ অপারেশনও প্রচুর সময় খরচ করে TLE দিতে পারে ।
আলোচনার সুবিধার্থে ধরে নিচ্ছি আমরা মডুলার ইনভার্স বের করব একটি মৌলিক সংখ্যা m এর সাপেক্ষে ।</description>
    </item>
    
    <item>
      <title>Matrix Exponentiation: O(n²logx) per Query</title>
      <link>https://shefin-cse16.github.io/post/matrix-exponentiation-optimization/</link>
      <pubDate>Wed, 19 Feb 2020 21:44:41 +0600</pubDate>
      
      <guid>https://shefin-cse16.github.io/post/matrix-exponentiation-optimization/</guid>
      <description>[এই আর্টিকেল পড়তে অবশ্যই ম্যাট্রিক্স এক্সপোনেনশিয়েশন সম্পর্কে ভালো আইডিয়া থাকতে হবে । ]
একটা প্রবলেম চিন্তা করা যাক। $100$টি নোডের একটি গ্রাফ দেওয়া আছে । গ্রাফের নোডগুলো বাই-ডিরেকশনাল এজ দিয়ে কানেক্টেড এবং যেকোনো $2$টি এজের মাঝে একাধিক এজ নেই । $1000$টি কুয়েরী থাকবে । প্রত্যেক কুয়েরীতে দুইটি পূর্ণসংখ্যা $u$ এবং $x$ ($x \leq 10^7$) দেওয়া থাকবে। বলতে হবে, গ্রাফে নোড $u$ থেকে শুরু হয়ে কতগুলো $x$ লেংথের পথ আছে ।</description>
    </item>
    
    <item>
      <title>Repeating Units</title>
      <link>https://shefin-cse16.github.io/post/repunit/</link>
      <pubDate>Tue, 18 Feb 2020 03:18:41 +0600</pubDate>
      
      <guid>https://shefin-cse16.github.io/post/repunit/</guid>
      <description>REPUNIT কী ?
REPUNIT হচ্ছে এমন একটা সংখ্যা, যে সংখ্যার সবগুলো ডিজিট 1 ।
যেমনঃ $5$ লেংথের REPUNIT হচ্ছে $11111$ । REPUNIT শুধুমাত্র Base $10$ নাম্বার সিস্টেমে বানানো যাবে, এমন ভাবাটা ভুল । Base $1$ ছাড়া আর যেকোনো নাম্বার সিস্টেমেই নির্দিষ্ট লেংথের REPUNIT নাম্বার বানানো যায় ।
REPUNIT নিয়ে বিভিন্ন ধরণের প্রবলেম তৈরি করা যায় । একটা প্রবলেম ধরা যাক এমনঃ Base $b$ আর ওই Base $b$ এর একটা নাম্বার $n$ দেওয়া আছে । বলতে হবে Base $b$ এর কোনো REPUNIT কে $n$ দিয়ে নিঃশেষে ভাগ করা যাবে কিনা ।</description>
    </item>
    
    <item>
      <title>ABOUT</title>
      <link>https://shefin-cse16.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shefin-cse16.github.io/about/</guid>
      <description> Hi, I&amp;rsquo;m Risal Shahriar Shefin. I&amp;rsquo;m a competitive programmer. Besides problem-solving, I like problem-setting too. Sometimes, I write about things that I learn while solving problems. This blog is an attempt to share those writings with all. Presently, I&amp;rsquo;m studying B.Sc. in CSE at RUET.
Some of my online judge appearances:
 Codeforces: shefin.cse16 LightOj: Shefin Codechef: shefin Toph: shefin UVA: shefin  </description>
    </item>
    
  </channel>
</rss>